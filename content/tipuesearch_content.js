var tipuesearch = {"pages": [{'title': '各組期末報告說明', 'text': '各組員必須在 W17 上課之前完成期末報告簡報影片上傳與連結, 並放入本網站之"專案口頭簡報"頁面. \n 各組必須在 W17 上課之前完成分組期末報告 pdf 檔案, 上傳至各分組的倉儲中, 並將連結提供至本網站之"專案報告書"頁面. \n 期末報告期間每週對各成員之評分依據下列要項: \n \n 各組員在各分組網站中所呈現之任務執行內容, 並拍攝操作影音 mp4, 將影片標題署名"國立虎尾科技大學-機械設計工程系-協同產品設計實習 A - 學號及影片主題" 後上傳, 並將影片嵌入本網站各章節頁面中. \n 每組將提供組長本網站倉儲協同管理權, 專門處理各組員在各分支或 master 分支中的 pull requests, 各組員必須透過以 ag1, ag2 .... 命名之分支對本倉儲改版, 確定內容無誤後, 再設法由組長處理各 pull requests 之內容合併, Github Pages 將設為與 master 分支對應, 各組員之評分將依據各 pull requests 中所列出之學號與內容判定. \n 請各組員勿將影片檔、圖片檔案或各式檔案送至本倉儲, 影片檔案請上傳至 Youtube, 圖片檔案請送至各組倉儲網站, 各式檔案則請送至各組員 Google Drive 區, 並以嵌入 (iframe), 將影片放入本網站, 其餘圖片或檔案則透過 img 或 a 標註放入各相關頁面. \n \n 2a 分組倉儲 \n https://github.com/mdekmol/cd2019a-task1-2019cda_t1_g1 \xa0( 2ag1 ) https://github.com/mdekmol/cd2019a-task1-2019cda_t1_g2 \xa0( 2ag2 ) https://github.com/mdekmol/cd2019a-task1-2019cda_t1_g3_1 \xa0( 2ag3 ) https://github.com/mdekmol/cd2019a-task1-2019cda_t1_g4 \xa0( 2ag4 ) https://github.com/mdekmol/cd2019a-task1-2019cda_t1_g5 \xa0( 2ag5 ) https://github.com/mdekmol/cd2019a-task1-2019cda_t1_g6 \xa0( 2ag6 )', 'tags': '', 'url': '各組期末報告說明.html'}, {'title': '執行規劃', 'text': '', 'tags': '', 'url': '執行規劃.html'}, {'title': '手足球系統模擬', 'text': '執行規劃為每週安排任務，計畫通常趕不上變化，而變化通常趕不上長官的一句話: \n W11 - 開會討論工作分配以及之後各週目標。 \n W12 - 利用Onshape 設計並將各零件及場地繪製完成並導出、簡化導出圖檔。 \n W13 - 利用Onshape 設計並將各零件及場地繪製完成並導出、利用Lua測試並完成手足球1對1回擊。 \n W14 - 於Vrep設定回球機構、利用Lua測試並完成手足球玩家對電腦。 \n W15 - 結合全部物件測試&修改 \n W16 - 整理並開始編輯個人網站&小組網站&PDF&影片。 \n W17 - 在課堂上進行分組報告。', 'tags': '', 'url': '手足球系統模擬.html'}, {'title': '設計與繪圖', 'text': '組合圖: \n https://cad.onshape.com/documents/0894dee7161cb625fbf66c24/w/dd82ba727b43d8551157d048/e/4e12526592dd2e271bca4ad7', 'tags': '', 'url': '設計與繪圖.html'}, {'title': '零組件尺寸分析', 'text': '手足球系統的零組件尺寸分析 (可行性分析) \n 1.手足球場地(長:57.4in\xa0 寬:30in\xa0 總高:10.7in) \n \n \n 原先球門牆壁厚度為0.7in \n \n \n 後來在模擬時發現球門前的球員動作距離有限,球容易卡在死角,最後決定將球門牆壁加厚 \n 球門尺寸 \n \n \n 球員總高4.3in以及跟竿子結合的洞(直徑)為0.562in \n \n 竿子直徑為0.562in \n 原本的竿子有給限制頭尾，但後來發現在模擬時會有一些小問題，所以決定去除 \n \n \n 〈軌道詳細設計〉 \n 設計初步草圖 \n \n 寬度設計1.5因需比球體半徑大一些 \n \n 螺旋線高度為4，為緩衝設計加大 \n \n 中間段使用掃略出圖形 \n 完成軌道及線架構 \n \n 軌道最終版 \n 由於我們的擊球系統過於強大，會讓球從舊版軌道直接飛出去，所以才把軌道上面封起來，變成最終版 \n \n 〈 集球門〉第三版 \n 初步草圖\xa0 \xa0 進球口 \n \n 出球口 \n \n \n 使用疊成拉伸把外圍先做出來，原本是想說看可不可以直接把孔一起用好，但Onshape似乎沒辦法做到，只好把孔另外再做出來 \n \n \n 疊成拉伸 \n \n 利用草圖四的邊線來繪製通道，並伸長2英吋 \n \n \n 在使用右側視圖畫出與上一個通道一樣的圖，伸長2英吋並選擇對稱 \n \n \n 而直向通道與橫向通道，因為有縫隙會造成簡化的難度，所以就伸長到下一個面 \n \n 因為伸長的關係所以要再開一個洞 \n \n 做這個斜坡是因為怕球撞到通道會反彈而不會滾去擊球裝置的位置，也可以讓球被擊出後能順利的進入軌道 \n \n \n 延伸的通道是為了擊球裝置的最大伸長路徑 \n \n 〈擊球檯 〉 \n 長為2.362英吋，寬為1.575英吋，向上伸長0.5英吋 \n \n 邊框向內偏移0.079英吋，向上伸長1英吋 \n \n \n 要先開孔 \n \n \n 在內部畫一個比孔小一點的圓為擊球桿 \n \n \n 1.3X1.3的正方形，伸長0.079英吋 \n \n \n 在尾端畫一個阻擋物以防擊球桿整支飛出去 \n \n \n \n \n 〈組合圖 〉 \n 這是最一開始的初步組合圖， \n 場地四周內側設計有圓角、場地上有突出障礙物以及回球機構 \n 設計理念: \n 1.圓角:以防球模擬時跑到角落就不會動了 \n 2.障礙物:多點障礙物，增加遊戲難度 \n 3.回球機構:任何一方得分後，球會自動回到場上 \n \n 但由於在模擬及簡化時有問題 \n 就砍掉之前的場地設計及距離 \n 因為過多增加系統負擔的圖形，只會拖慢模擬速度 \n 而回球機構我們設計了一個擊球系統 \n 擊球系統:任何一方得分後，球進入軌道，會由擊球機構把球擊出並沿著軌道回到被得分那一方上 \n', 'tags': '', 'url': '零組件尺寸分析.html'}, {'title': '參數設計與繪圖', 'text': '手足球系統的零組件參數設計與繪圖 (零組件初步設計繪圖) \n Onshape 零組件連結 \n 【機構設計】 \n 〈初始設計〉 \n 初始設計挑出了選多方案，如: \n 1.桿件推送 \n 2.螺旋尺上推 \n 3.打擊軌道 \n \n 最後挑選打擊裝置搭配配斜面軌道的方式將球送出。 \n 因只需一次做動就可完成目標。 \n \n 〈軌道設計〉 \n \n 最初設計是想將兩條軌道集合一束，用一次打擊就可， \n 但後來發現會有收束誤差與繪製上的困難，後來還是改 \n 為左右各開一條軌道，後來還是改為左右各開一條軌道 \n 並各自擁有一打擊裝置。 \n 最後採用複斜面旋轉軌道，將球送至最高點後，再使用斜面將球滾落。 \n \n 〈打擊機構設計〉 \n \n 打擊機構非常直覺，就是使用一個帶緣圓棒將球打擊出去， \n 並外掛置打擊區旁，作為球之動力。 \n \n 〈 集球門 〉 \n 原先的設計，發現組裝後門框的高度沒有高於球門，怕會出現卡球的可能所以要重新畫 \n \n \n \n 第二版\xa0 \n \n 在畫的時候發現球檯沒有高度，而假如球快速的撞擊檔板可能會造成球直接反彈並有可能回到場地內，就把球檯加高3英吋，在檔板的部分畫成密閉式以防球會跑出去 \n \n 而在這裡加裝這支橫桿是因為在舊版的球門框有高低的落差，如果不加這支橫桿球在進入擊球門前會被凹槽卡住，因為這個原因所以在新版就把高低落差的問題給解決所以在新版就沒有這支橫桿。 \n \n \n 一開始畫通道的時候，想說話圓弧型的比較好滾動，但在簡化方面就比較困難，所以在第三版畫的時候就把它改成方形的。 \n \n \n \n 〈 軌道 〉初版 \n 因為當時還不確定球的大小，就先設計較大的尺寸，以利後續挑整 \n \n \xa0用螺旋線做去軌道的路線 \n \n 用掃掠將軌道做出 \n \n 最後的下銳 \n \n 不過因為螺旋半徑不夠大、下銳角太大、整體上升不足......等問題做了第二代 \n', 'tags': '', 'url': '參數設計與繪圖.html'}, {'title': '細部設計與 BOM', 'text': '各零件圖 BOM \n 球場 \n 工程圖連結 \n \n 球員 \n 工程圖連結 \n \n 軌道 \n 工程圖連結 \n \n 導球球門 \n 工程圖連結 \n \n 擊球系統 \n 工程圖連結 \n \n 場地組合 \n 工程圖連結 \n \n 組合圖 BOM \n 工程圖連結 \n \n', 'tags': '', 'url': '細部設計與 BOM.html'}, {'title': '圖形簡化', 'text': '簡化目的是要把繁瑣的圖形切割，變成比較簡單的圖形切割，程式在模擬的時候將會變得順暢。 \n 利用V-rep裡面的 Manual mesh division(手動分割網格)來合併圖塊。 \n \n 圖形簡化後變成許多圖塊。 \n \n 完成之後合併圖塊。 \n \n 各零件的圖形簡化如上面步驟依此類推...... \n 完成品~ \n \n', 'tags': '', 'url': '圖形簡化.html'}, {'title': 'V-rep 動態模擬', 'text': '', 'tags': '', 'url': 'V-rep 動態模擬.html'}, {'title': '送球機構設計與模擬', 'text': '由於當初設計不量沒考慮周到導致距離太遠及斜度太過另外球含有很0.75的彈性係數，這導致球根本上不去有時還飛出軌道...我想到的解決方法是加上蓋子以及在球於軌道中時寫個判斷式讓球傳送到離洞口較近的下坡，想不到球一開始就過不了洞，之後又寫了個讓球能滾出去的code，這是偷吃步的方法也是利用程式輔助機構的方法，雖然很不真實但確實可行。 \n \n \n 檔案:\xa0 TTT檔 \n 原網址:\xa0 ag2 \n', 'tags': '', 'url': '送球機構設計與模擬.html'}, {'title': '系統功能展示', 'text': '這裡紀載了全部的手足球版本以及詳細歷程 \n 由於部分程式過長所以 點此處 可以到原網站 \n 人機對決 \n 最終版本的\'玩家與電腦\'對打，完整code \n 操作說明:方向鍵的左右下按鍵 、z、x、c、v分別按順序從z的守門員到v的最前排、R鍵用來讓球回位至正中央(怕卡bug) (( 人機對決 程式過長 \n \n \n 檔案: https://github.com/mdecadp2018/site-40623130/blob/gh-pages/v-rep/robot/FinalVersion.ttt \n 機² 對決 \n 寫完人機對打後，花了不到1小時寫完電腦對電腦的版本 -(( 機² 對決程式過長 \n \n 檔案: https://github.com/mdecadp2018/site-40623130/blob/gh-pages/v-rep/robot/FinalVersion_EX.ttt \n 人形歸位 \n 我將每根桿件設定成"當按了按鍵變成擊球狀態後會到達邊界數值，如果到達邊界直做減速度運動回到初始狀態"，下方code中為+dVel，其原因是因為原先設定擊球為做減速度運動而回球則加入加速度。 \n \n A= sim.getObjectHandle(\'RS1_PO1\')\nPA= sim.getObjectPosition(A,-1)\nif PA[1] >= -0.712 then\n    Roller_v = Roller_v + dVel*3\nend\nB= sim.getObjectHandle(\'RS2_PO1\')\nPB= sim.getObjectPosition(B,-1)\nif PB[1] >= -0.531 then\n    Roller_v2 = Roller_v2 + dVel*3\nend\nC= sim.getObjectHandle(\'RS4_PO2\')\nPC= sim.getObjectPosition(C,-1)\nif PC[1] >= -0.197 then\n    Roller_v3=Roller_v3 + dVel*5\nend\nD= sim.getObjectHandle(\'RS3_PO1\')\nPD= sim.getObjectPosition(D,-1)\nif PD[1] >= 0.137 then\n    Roller_v4=Roller_v4 + dVel*5\nend \n 檔案: https://github.com/mdecadp2018/site-40623130/blob/gh-pages/v-rep/robot/www2.ttt \n 電腦多人形球位判斷式 \n 將擊球的人行分成三個後，紀錄每兩個人型之間的距離，利用補正讓球穿過人形與人形之間的分界線時，判斷式work，加入補正的數值讓最左或是最右邊的人形能對正球體。 此程式為最初簡易版本。 (判斷式過長 \n \n \n \n 檔案: https://github.com/mdecadp2018/site-40623130/blob/gh-pages/v-rep/robot/ww5.ttt \n 回球判斷式-無軌道(包含計分判斷式) \n 一開始還沒有導球軌道時，為了不用一直關掉在啟動，寫了一個簡單的回位code，讓球經過球門時，由於球門有判斷式屬於邊界，一通過就會回到設定好的球。 \n 而計分也是利用相通的方法，且由於此程式會自動形成迴圈所以讓他判斷成每當球經過時+1分後回傳。此程式為最初簡易版本。 \n \n 以下都更改於function sysCall_actuation()中 \n \xa0 \n        if 1 then  --C_goalkeeper\n            if X <= 0.02 then\n                sim.setJointTargetVelocity(LR1,-5)\n            elseif X > 0.02 then\n                sim.setJointTargetVelocity(LR1,5)\n            end\n       end\n----------------\n       if Ball_s[1] < -0.85 or Ball_s[1] >= 0.61 then\n            sim.setObjectPosition(Ball,-1,{-0.1429, -0.1334, 0.5})\n       end\n \n \n \n 檔案: https://github.com/mdecadp2018/site-40623130/blob/gh-pages/v-rep/robot/Reborn.ttt \n 偽-回球判斷式-有軌道 \n 也就是送球機構於上一章節的送球機構設計與模擬討論過 \n \n function reborn_ball_count_goal()\n    if Ball_s[1] < -0.85 and Ball_s[3] > 0.12507 then\n        Player_G = Player_G + 1\n--        sim.setObjectPosition(Ball,-1,{-0.13, -0.1334, 0.5})\n    end   \n    if Ball_s[1] >= 0.61 and Ball_s[3] > 0.1251 then\n        Computer_G = Computer_G + 1\n--        sim.setObjectPosition(Ball,-1,{-0.15, -0.1334, 0.5})\n    end\n    if Ball_s[3] > 0.1251 then\n        if Ball_s[1] < -0.85 or Ball_s[1] >= 0.61 then\n            print[[Player : Computer]]\n            print(\'      \'..Computer_G..\'     \'..Player_G)\n        end\n    end\n    if Ball_s[1] > 0.905 and Ball_s[2] < -0.069 and Ball_s[3] < 0.036 then\n        sim.setJointTargetVelocity(Push_1,1)\n    end\n    if Ball_s[1] < -1.15 and Ball_s[2] < -0.123 and Ball_s[3] < 0.036 then\n        sim.setJointTargetVelocity(Push_2,-1)\n    end\n    if Ball_s[3] > 0.036 then\n        sim.setJointTargetVelocity(Push_1,-1)\n        sim.setJointTargetVelocity(Push_2,1)\n    end\n    if Ball_s[1] < -1.156 and Ball_s[2] > 0.163 and Ball_s[3] > 0.058 then\n    sim.setObjectPosition(Ball,-1,{-0.20361, 0.2739, 0.15735})\n    end\n    if Ball_s[1] < -0.20361 and Ball_s[2] > 0.2740 and Ball_s[3] > 0.15735 then\n    sim.setObjectPosition(Ball,-1,{-0.2049, 0.23, 0.1482})\n    end\n    if Ball_s[1] > 0.9056 and Ball_s[2] <  -0.4247 and Ball_s[3] > 0.0592 then\n    sim.setObjectPosition(Ball,-1,{-0.043425,  -0.60401, 0.15735})\n    end\n    if Ball_s[1] > -0.04753 and Ball_s[2] <  -0.5240 and Ball_s[3] > 0.15735 then\n    sim.setObjectPosition(Ball,-1,{-0.03667,  -0.48443, 0.1482})\n    end\nend \n \n 檔案: https://github.com/mdecadp2018/site-40623130/blob/gh-pages/v-rep/robot/C_Goal_4.3.ttt \n 問題與討論 \n Q1.怎麼沒有雙打? \n A1.按鍵過多不好操控，最後會變成賽外賽? \n Q2.彈性係數怎麼調整? \n A2. 彈性系數於球的材質中調整，而材質的調整在關係設定的下方，表中的Restitution就是了最大彈性為1最小為0，越大越彈。 \n \n T3: 反作用設定:包含場地、球、桿件、人形 ((解釋起來很麻煩但大概是這樣 \n 第一個為場地 : 第一行設定讓除了球、人形的桿件能反應但設定第八行讓球、人形可反應但桿件無法，其餘不勾選 \n \n 第二個為球 : 第一行不勾選讓桿件與人行無法反應，但勾選其他行(第八)讓人形能反應 \n \n 第三個為桿件 : 只與場地反應((這裡注意，桿件本身與人型成父子屬性 \n \n 最後是人形 : 勾選第八行讓球反應可踢球且因與場地反應所以不出場地 \n \n 理解這個需要一點邏輯...如果不懂就照勾選吧... \n T4. 運行時建議 先點一下烏龜 太快會增加電腦能力也有機率bug \n \n Q5.怎麼不用python寫?? \n A5.我會選擇使用Vrep內嵌的Lua編寫的原因 \n 優點: \n python : 可執行運算值較大的編譯、可加外部其他的程式合用 \n lua : Vrep內部沿用 , 延遲現象較少、編譯很方便 \n 缺點: \n python : 會有爆ping問題導致延遲、產生很多衝突可能性高 \n lua : 太多運算時直接停止、內部函式限制多 \n 目前體會到的優缺點大概就這樣，而且感覺我們班大部分的人都是用 python\xa0寫，所以我想用少數人用的lua。', 'tags': '', 'url': '系統功能展示.html'}, {'title': '結案報告', 'text': '', 'tags': '', 'url': '結案報告.html'}, {'title': '專案口頭簡報', 'text': '小組 \n 40623130 \n 40623133 \n 40623139 \n 40623142 \n 40623145 \n 其餘組員待補 吧', 'tags': '', 'url': '專案口頭簡報.html'}, {'title': '專案報告書', 'text': '各組完成 html 與 pdf 格式之手足球專案結案報告 (文字結案報告書) \n PDF', 'tags': '', 'url': '專案報告書.html'}]};